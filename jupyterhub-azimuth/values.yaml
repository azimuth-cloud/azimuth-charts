zenithClient:
  iconUrl: https://raw.githubusercontent.com/jupyter/design/master/logos/Logo%20Mark/logomark-orangebody-greyplanets/logomark-orangebody-greyplanets.png
  description:
  label: "Jupyter Notebook"

jupyterhub:
  prePuller:
    hook:
      enabled: false
    continuous:
      enabled: false

  # For the proxy, we only need a ClusterIP service as Zenith will punch it out
  proxy:
    service:
      type: ClusterIP
    chp:
      # Use stackhpc's ghcr image copy
      image:
        name: ghcr.io/stackhpc/azimuth-charts/docker.io/jupyterhub/configurable-http-proxy
        tag: 4.5.3
      networkPolicy:
        enabled: false

  hub:
    # Use stackhpc's ghcr image copy
    image:
      name: ghcr.io/stackhpc/azimuth-charts/docker.io/jupyterhub/k8s-hub
      tag: 2.0.0
    networkPolicy:
      enabled: false
    extraConfig:
      # Until https://github.com/jupyterhub/kubespawner/issues/498 is fixed
      # https://discourse.jupyter.org/t/advanced-z2jh-deeply-customizing-the-spawner/8432
      customspawner.py: |
        from kubespawner import KubeSpawner

        class CustomSpawner(KubeSpawner):
            def _build_common_labels(self, extra_labels):
                labels = super()._build_common_labels(extra_labels)
                label_username = "jupyter-" + labels['hub.jupyter.org/username']
                labels['hub.jupyter.org/username'] = label_username
                return labels

        c.JupyterHub.spawner_class = CustomSpawner

      # Configure the authentication to respect the X-Remote-User header sent by Zenith from Azimuth
      remoteuser.py: |
        from jupyterhub.auth import Authenticator
        from jupyterhub.handlers import BaseHandler

        from tornado import web

        class RemoteUserLoginHandler(BaseHandler):
            def get(self):
                remote_user = self.request.headers.get("X-Remote-User")
                if not remote_user:
                    raise web.HTTPError(401)
                user = self.user_from_username(remote_user)
                self.set_login_cookie(user)
                next_url = self.get_next_url(user)
                self.redirect(next_url)

        class RemoteUserAuthenticator(Authenticator):
            def get_handlers(self, app):
                return [(r'/login', RemoteUserLoginHandler)]

            async def authenticate(self, *args, **kwargs):
                raise NotImplementedError()

        c.JupyterHub.authenticator_class = RemoteUserAuthenticator

  singleuser:
    # Use stackhpc's ghcr image copy
    image:
      name: ghcr.io/stackhpc/azimuth-charts/docker.io/jupyterhub/k8s-singleuser-sample
      tag: 2.0.0
    networkPolicy:
      enabled: false
    defaultUrl: /lab
    extraEnv:
      JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
