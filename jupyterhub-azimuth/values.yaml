zenithClient:
  iconUrl: https://raw.githubusercontent.com/jupyter/design/master/logos/Logo%20Mark/logomark-orangebody-greyplanets/logomark-orangebody-greyplanets.png
  description:
  label: "Jupyter Notebook"

user_notebook_profiles:
  default_profiles:
    - display_name: "Minimal environment"
      description: "To avoid too much bells and whistles: Python."
      slug: "minimal"
      default: true
    - display_name: "Datascience environment"
      description: "If you want the additional bells and whistles: Python, R, and Julia."
      slug: "datascience"
      kubespawner_override:
        image: "quay.io/jupyter/datascience-notebook:2024-08-05"
    - display_name: "Pytorch environment (CPU)"
      description: "The official Jupyter Pytorch."
      slug: "pytorch-cpu"
      kubespawner_override:
        image: "quay.io/jupyter/pytorch-notebook:pytorch-2.4.0"
  custom_profiles:
    nvidia.com/gpu.present:
      - display_name: "Pytorch environment (Nvidia GPU)"
        description: "The official Jupyter Pytorch + CUDA image. Requires a GPU compatible notebook server."
        slug: "pytorch-nvidia-gpu"
        kubespawner_override:
          image: "quay.io/jupyter/pytorch-notebook:cuda12-pytorch-2.4.0"
          extra_resource_limits:
            nvidia.com/gpu: "1"
    gpu.intel.com/device-id.0380-0bd5.present:
      - display_name: "Pytorch environment (Intel GPU)"
        description: "A Jupyter + Intel Pytorch image. Requires a GPU compatible notebook server."
        slug: "pytorch-intel-gpu"
        kubespawner_override:
          image: "ghcr.io/stackhpc/jupyterhub-pytorch-intel-gpu:v0.0.1"
          extra_resource_limits: 
            gpu.intel.com/i915: "1"
          supplemental_gids:
            - "110"

jupyterhub:
  prePuller:
    hook:
      enabled: false
    continuous:
      enabled: false

  # For the proxy, we only need a ClusterIP service as Zenith will punch it out
  proxy:
    service:
      type: ClusterIP
    chp:
      networkPolicy:
        enabled: false

  hub:
    networkPolicy:
      enabled: false
    image:
      name: ghcr.io/azimuth-cloud/azimuth-jupyterhub-k8s-hub
      tag: test-branch
    extraVolumes:
      - name: jupyterhub-profile-config
        configMap:
          name: jupyterhub-profile-config
    extraVolumeMounts:
      - name: jupyterhub-profile-config
        mountPath: /etc/jupyterhub/custom
        readOnly: true
        
    extraConfig:
      load-profiles.py: |
        import sys
        sys.path.append("/etc/jupyterhub/custom")
        from profiles import get_profile_list
        c.KubeSpawner.profile_list = get_profile_list

      # Configure the authentication to respect the X-Remote-User header sent by Zenith from Azimuth
      remoteuser.py: |
        from jupyterhub.auth import Authenticator
        from jupyterhub.handlers import BaseHandler

        from tornado import web

        class RemoteUserLoginHandler(BaseHandler):
            def get(self):
                remote_user = self.request.headers.get("X-Remote-User")
                if not remote_user:
                    raise web.HTTPError(401)
                user = self.user_from_username(remote_user)
                self.set_login_cookie(user)
                next_url = self.get_next_url(user)
                self.redirect(next_url)

        class RemoteUserAuthenticator(Authenticator):
            def get_handlers(self, app):
                return [(r'/login', RemoteUserLoginHandler)]

            async def authenticate(self, *args, **kwargs):
                raise NotImplementedError()

        c.JupyterHub.authenticator_class = RemoteUserAuthenticator

  singleuser:
    networkPolicy:
      enabled: false
    defaultUrl: /lab
    extraEnv:
      JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"