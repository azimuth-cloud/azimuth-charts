zenithClient:
  iconUrl: https://raw.githubusercontent.com/jupyterhub/binderhub/main/binderhub/static/images/logo_square.png
  description:
  label: "Binderhub"

binderhub:
  jupyterhub:
    proxy:
      service:
        # Don't use a Loadbalancer for jupyterhub since service will sit behind Zenith
        type: ClusterIP
      chp:
        networkPolicy:
          enabled: false
    prePuller:
      hook:
        enabled: false
      continuous:
        enabled: false
    hub:
      networkPolicy:
        enabled: false
      extraConfig:
        # Until https://github.com/jupyterhub/kubespawner/issues/498 is fixed
        # https://discourse.jupyter.org/t/advanced-z2jh-deeply-customizing-the-spawner/8432
        customspawner.py: |
          from kubespawner import KubeSpawner

          class LocalRegistryMixin:
              def start(self):
                  self.image = self.image.replace('binderhub-registry:80', 'localhost:31782')
                  return super().start()

          class CustomSpawner(BinderSpawnerMixin, LocalRegistryMixin, KubeSpawner):

              def _build_common_labels(self, extra_labels):
                  labels = super()._build_common_labels(extra_labels)
                  label_username = "jupyter-" + labels['hub.jupyter.org/username']
                  labels['hub.jupyter.org/username'] = label_username
                  return labels
          
          c.KubeSpawner.image_pull_secrets = ["binderhub-registry-image-pull"]

          c.JupyterHub.spawner_class = CustomSpawner

        # Configure the authentication to respect the X-Remote-User header sent by Zenith from Azimuth
        remoteuser.py: |
          from jupyterhub.auth import Authenticator
          from jupyterhub.handlers import BaseHandler

          from tornado import web

          class RemoteUserLoginHandler(BaseHandler):
              def get(self):
                  remote_user = self.request.headers.get("X-Remote-User")
                  if not remote_user:
                      raise web.HTTPError(401)
                  user = self.user_from_username(remote_user)
                  self.set_login_cookie(user)
                  next_url = self.get_next_url(user)
                  self.redirect(next_url)

          class RemoteUserAuthenticator(Authenticator):
              def get_handlers(self, app):
                  return [(r'/login', RemoteUserLoginHandler)]

              async def authenticate(self, *args, **kwargs):
                  raise NotImplementedError()

          c.JupyterHub.authenticator_class = RemoteUserAuthenticator

    singleuser:
      networkPolicy:
        enabled: false
      defaultUrl: /lab
      extraEnv:
        JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
  
  imageBuilderType: dind
  dind:
    daemonset:
      extraArgs:
        - --debug
        - "--insecure-registry"
        - "binderhub-registry:80"

  # Don't use a Loadbalancer for binderhub since service will sit behind Zenith
  service:
    type: ClusterIP

  # Configure binder to use installed local container registry
  registry:
    # This value is also used as the name for the Service resource which exposes the local container registry
    # TODO: Is there a better way to set this value dynamically (e.g. based on namespace, release name etc.)?
    url: http://binderhub-registry:80
    username: "testuser"
    password: "testpassword"
  
  config:
    BinderHub:
      # Local url should be set explicitly here since (external) hub_url is overwritten dynamically in extraConfig
      hub_url_local: http://hub:8081/
      use_registry: true
      image_prefix: binderhub-registry:80/
    DockerRegistry:
      token_url: None
  
  extraConfig:
    customlauncher.py: |
      from kubernetes import client, config

      config.load_incluster_config()
      api = client.CustomObjectsApi()
      current_namespace = open("/var/run/secrets/kubernetes.io/serviceaccount/namespace").read()
      reservations = api.list_namespaced_custom_object('zenith.stackhpc.com', 'v1alpha1', current_namespace, 'reservations')['items']      
      hub_zenith_reservation = list(filter(lambda x: '-binderhub-azimuth-jupyterhub' in x['metadata']['name'], reservations))
      if len(hub_zenith_reservation) > 0:
        # Do some logging here?
        pass
      zenith_url = hub_zenith_reservation[0]['status']['fqdn']
      c.BinderHub.hub_url = f'http://{zenith_url}'