zenithClient:
  iconUrl: https://raw.githubusercontent.com/jupyter/design/master/logos/Logo%20Mark/logomark-orangebody-greyplanets/logomark-orangebody-greyplanets.png
  description:
  label: "Jupyter Notebook"

daskhub:
  dask-gateway:
    gateway:
      extraConfig:
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String
          def option_handler(options):
              if ":" not in options.image:
                  raise ValueError("When specifying an image you must also provide a tag")
              return {
                  "image": options.image,
              }
          c.Backend.cluster_options = Options(
              String("image", default="pangeo/base-notebook:2022.05.10", label="Image"),
              handler=option_handler,
          )

  jupyterhub:
    prePuller:
      hook:
        enabled: false
      continuous:
        enabled: false

    # For the proxy, we only need a ClusterIP service as Zenith will punch it out
    proxy:
      service:
        type: ClusterIP
      chp:
        networkPolicy:
          enabled: false

    hub:
      networkPolicy:
        enabled: false
      # Configure the authentication to respect the X-Remote-User header sent by Zenith from Azimuth
      extraConfig:
        remoteuser.py: |
          from jupyterhub.auth import Authenticator
          from jupyterhub.handlers import BaseHandler

          from tornado import web
          import re

          class RemoteUserLoginHandler(BaseHandler):
              def get(self):
                  remote_user = self.request.headers.get("X-Remote-User")
                  # Sanitise input
                  remote_user = re.sub(r'[^a-zA-Z0-9._\-]', '-', remote_user).strip('-').strip('.').strip('_')
                  if not remote_user:
                      raise web.HTTPError(401)
                  user = self.user_from_username(remote_user)
                  self.set_login_cookie(user)
                  next_url = self.get_next_url(user)
                  self.redirect(next_url)

          class RemoteUserAuthenticator(Authenticator):
              def get_handlers(self, app):
                  return [(r'/login', RemoteUserLoginHandler)]

              async def authenticate(self, *args, **kwargs):
                  raise NotImplementedError()

          c.JupyterHub.authenticator_class = RemoteUserAuthenticator

    singleuser:
      networkPolicy:
        enabled: false
      defaultUrl: /lab
      extraEnv:
        DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{JUPYTER_IMAGE_SPEC}'
        JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
